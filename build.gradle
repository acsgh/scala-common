allprojects {
    group = 'com.acsgh.common.scala'
}

println("Version: " + version)

subprojects {
    apply plugin: "scala"
    apply plugin: 'maven'
    apply plugin: 'signing'

    compileJava.options.encoding = 'UTF-8'

    sourceCompatibility = 11
    targetCompatibility = 11

    group = getGroupName(project)

    dependencies {
        compile "org.scala-lang:scala-library:$SCALA_VERSION"
        compile "org.slf4j:slf4j-api:1.7.21"

        testRuntime 'ch.qos.logback:logback-classic:1.1.7'

        testCompile "org.junit.jupiter:junit-jupiter-api:5.3.2"
        testCompile "org.junit.jupiter:junit-jupiter-params:5.3.2"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.2"
        testCompile 'org.junit.vintage:junit-vintage-engine:5.3.2'
        testCompile 'junit:junit:4.12'

        testCompile "org.scalatest:scalatest_2.12:3.0.5"
        testCompile 'org.scalacheck:scalacheck_2.12:1.14.0'
        testRuntime "org.pegdown:pegdown:1.4.2"
        testCompile "org.scalamock:scalamock_2.12:4.1.0"
    }

    repositories {
        mavenCentral()
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.with {
            force = true
        }
    }
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    if (!hasProperty("ossrhUsername")) {
        project.ext.ossrhUsername = ""
    }

    if (!hasProperty("ossrhPassword")) {
        project.ext.ossrhPassword = ""
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name = 'Scala common'
                    description = 'Common utils used in several projects'
                    url = 'https://github.com/acsgh/scala-common'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'acsgh'
                            name = 'Alberto Crespo'
                            email = 'albertocresposanchez@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git@github.com:acsgh/scala-common.git'
                        developerConnection = 'scm:git:git@github.com:acsgh/scala-common.git'
                        url = 'https://github.com/acsgh/scala-common'
                    }
                }
            }
        }
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
}

String getGroupName(Project project) {
    if ((project.parent == null) || (project.parent == rootProject)) {
        return project.group
    } else {
        return getGroupName(project.parent) + "." + project.parent.name
    }
}

